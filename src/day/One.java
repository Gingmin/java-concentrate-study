
public class One {

	/* 2020.12.16 스터디 */
	
	/* <<메소드>>
	 * 
	 * void는 return 값 필요없음
	 * 마지막에 자동으로 return을 추가해줌
	 * return은 자신을 호출한 곳으로 복귀, 리턴값을 가지고 돌아갈 수 있다.
	 * return이 void가 아닐 경우 가지고 갈 타입을 정해줘야 한다.
	 * 메소드는 한 클래스에 몰아 쓰지말고 클래스를 나누는 것이 필요하다.
	 * 
	 * static 메소드
	 * static 메소드는 호출하는 방법이 다르다.
	 * 클래스명.매소드명();
	 * static 메소드는 프로그램이 시작될 때(로드) 만들어지기 때문에 인스턴스를 생성하지 않고 사용할 수 있다.
	 * 
	 * 클래스 이름에는 패키지 이름이 포함되어있다. 
	 * 그래서 다른 클래스를 사용하기 위해서는 임포트 해야한다.
	 * 임포트 하지 않으려면 패키지 풀네임을 적어줘야 한다.
	 * 
	 * API
	 * 대표적 예 java.lang.
	 *  */
	
	/* <<제어문>> */
	/* 
	 * 문서화 주석의 중요성
	 * 이번 미니프로젝트하면서 많이 느낀 것 중 하나!
	 * 인터페이스를 사용하지 않아서 사람마다 클래스가 달라졌고 그때마다 클래스 안의 코드의 의미를 파악하는데 시간이 걸렸다.
	 * 협업에 있어어 정말 중요하다.
	 * 
	 * if-else 문 둘 중 하나는 무조건 실행할 때
	 * if-else-if 여러 개의 조건을 제시하여 그 중 한 가지를 반드시 실행시키고 싶은 경우
	 * 
	 * switch문 여러 개의 비교값 중 일치하는 조건에 해당하면 실행
	 * break 를 써주지 않으면 모든 케이스를 실행시켜 버린다. 
	 * 실수값이나 논리값은 X
	 * 문자열 비교는 JDK 1.7부터 가능
	 * 
	 * for문 / While문
	 * for문은 직접 코드를 작성하면서 연습해봐야 깨우칠 수 있다.
	 * 왜 같은 반복문인데  for문과 while문 둘 다 있을까?
	 * while은 좀 더 간편하게 반복문을 하기 위해서, for문은 구체적으로 얼마큼 반복할 것인지 정할 때 (개인 생각)
	 * 
	 * 분기문
	 * break문은 빠져나갈 때,
	 * continue는 조건을 충족하지 않을 때 다시 반복문을 실행시키고 싶은 경우(예외처리하고자 할때)
	 * label: 이런식으로 반복문
	 *  */
}
